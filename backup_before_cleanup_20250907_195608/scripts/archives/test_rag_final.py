#!/usr/bin/env python3
"""
Test final du connecteur RAG apr√®s corrections
Sprint Phoenix 72h - Point A : Validation du RAG
"""

import json
import sys
from pathlib import Path

print("="*60)
print("üöÄ TEST FINAL DU CONNECTEUR RAG - MOTEYI/ETEYELO")
print("="*60)

# Ajouter le chemin des scripts
sys.path.insert(0, 'scripts')

# Test 1: V√©rification rapide du manifest
print("\nüìö V√©rification du Manifest")
print("-"*40)
manifest_path = Path("data/index/manifest.json")
manifest = json.load(open(manifest_path, 'r', encoding='utf-8'))
print(f"‚úÖ {len(manifest)} documents charg√©s")

# Compter les documents multilingues
langues = {'Lingala': 0, 'Kiswahili': 0, 'Ciluba': 0}
for doc in manifest:
    doc_str = str(doc).lower()
    if 'lingala' in doc_str:
        langues['Lingala'] += 1
    if 'kiswahili' in doc_str:
        langues['Kiswahili'] += 1
    if 'ciluba' in doc_str:
        langues['Ciluba'] += 1

print("\nüåç Documents en langues locales:")
for langue, count in langues.items():
    print(f"   - {langue}: {count} documents")

# Test 2: Import et initialisation du RAG
print("\n" + "="*60)
print("‚ö° TEST DU CONNECTEUR RAG")
print("="*60)

try:
    from rag_connector import CongoRAGConnector
    print("‚úÖ Module rag_connector import√© avec succ√®s")
    
    # Initialiser le connecteur
    rag = CongoRAGConnector(base_path="data")
    
    # V√©rifier le nombre de documents
    if len(rag.documents) == 117:
        print(f"‚úÖ RAG initialis√© avec {len(rag.documents)} documents")
    else:
        print(f"‚ö†Ô∏è RAG initialis√© avec {len(rag.documents)} documents (attendu: 117)")
    
    # Test 3: Recherches concr√®tes
    print("\nüîç TESTS DE RECHERCHE")
    print("-"*40)
    
    # Test Math√©matiques Primaire
    print("\n1Ô∏è‚É£ Test Math√©matiques Primaire")
    q1 = "Comment calculer l'aire d'un rectangle en 5√®me primaire?"
    ctx1 = rag.query_rag(q1)
    print(f"   Question: {q1}")
    print(f"   ‚úÖ Documents trouv√©s: {len(ctx1['documents'])}")
    if ctx1['found'] and ctx1['documents']:
        for i, doc in enumerate(ctx1['documents'][:2], 1):
            print(f"   {i}. {doc['titre']}")
            print(f"      Niveau: {doc['niveau']}, Score: {doc['score']}")
    
    # Test Lingala
    print("\n2Ô∏è‚É£ Test Documents Lingala")
    q2 = "Guide enseignant lingala 2√®me ann√©e"
    ctx2 = rag.query_rag(q2)
    print(f"   Question: {q2}")
    print(f"   ‚úÖ Documents trouv√©s: {len(ctx2['documents'])}")
    if ctx2['found'] and ctx2['documents']:
        for i, doc in enumerate(ctx2['documents'][:2], 1):
            print(f"   {i}. {doc['titre']}")
            print(f"      Langue: {doc.get('langue', 'N/A')}")
    
    # Test Sciences Secondaire
    print("\n3Ô∏è‚É£ Test Sciences Secondaire")
    q3 = "Photosynth√®se SVT 8√®me"
    ctx3 = rag.query_rag(q3, grade_level="8√®me EB")
    print(f"   Question: {q3}")
    print(f"   ‚úÖ Documents trouv√©s: {len(ctx3['documents'])}")
    if ctx3['found'] and ctx3['documents']:
        for i, doc in enumerate(ctx3['documents'][:2], 1):
            print(f"   {i}. {doc['titre']}")
            print(f"      Mati√®re: {doc.get('matiere', 'N/A')}")
    
    # Test 4: V√©rifier le prompt enrichi
    print("\n4Ô∏è‚É£ Test Enrichissement du Prompt GPT")
    print("-"*40)
    if ctx1['found']:
        prompt = ctx1['prompt_enhancement']
        print("‚úÖ Prompt enrichi g√©n√©r√© avec succ√®s")
        print("\nüìù Extrait du prompt enrichi (200 premiers caract√®res):")
        print(prompt[:200] + "...")
        
        # V√©rifier les √©l√©ments cl√©s
        elements_cles = ['RDC', 'MEPST', 'fleuve Congo', 'Kinshasa', 'Francs congolais']
        elements_presents = [elem for elem in elements_cles if elem in prompt]
        print(f"\n‚úÖ √âl√©ments contextuels RDC pr√©sents: {len(elements_presents)}/{len(elements_cles)}")
        for elem in elements_presents:
            print(f"   - {elem} ‚úì")
    
    # Test 5: Statistiques
    print("\nüìä STATISTIQUES DU RAG")
    print("-"*40)
    stats = rag.get_stats()
    print(f"   Requ√™tes effectu√©es: {stats['queries']}")
    print(f"   Taux de succ√®s: {stats['hit_rate']:.1f}%")
    print(f"   Documents moyens retourn√©s: {stats['avg_docs_returned']:.1f}")
    
    # Validation finale
    print("\n" + "="*60)
    print("‚úÖ VALIDATION DU POINT A - CONNECTEUR RAG")
    print("="*60)
    
    validation_points = {
        "117 documents charg√©s": len(rag.documents) == 117,
        "Documents multilingues d√©tect√©s": langues['Lingala'] > 0 and langues['Kiswahili'] > 0,
        "Recherches fonctionnelles": ctx1['found'] or ctx2['found'] or ctx3['found'],
        "Contexte RDC dans les prompts": 'RDC' in str(ctx1.get('prompt_enhancement', '')),
        "Statistiques actives": stats['queries'] > 0
    }
    
    points_valides = sum(validation_points.values())
    total_points = len(validation_points)
    
    print(f"\nüìã Points de validation: {points_valides}/{total_points}")
    for point, valide in validation_points.items():
        status = "‚úÖ" if valide else "‚ùå"
        print(f"   {status} {point}")
    
    if points_valides == total_points:
        print("\nüéâ SUCC√àS TOTAL - LE RAG EST 100% OP√âRATIONNEL!")
        print("üëâ Pr√™t pour le Point B: Activation Multilingue")
    elif points_valides >= 3:
        print("\n‚úÖ RAG FONCTIONNEL - Quelques ajustements mineurs possibles")
        print("üëâ Peut passer au Point B avec surveillance")
    else:
        print("\n‚ö†Ô∏è RAG PARTIELLEMENT FONCTIONNEL - Corrections n√©cessaires")
    
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("V√©rifiez que scripts/rag_connector.py existe et est correct")
except Exception as e:
    print(f"‚ùå Erreur lors du test: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "="*60)
print("FIN DU TEST - SPRINT PHOENIX 72H")
print("="*60)