#!/usr/bin/env python3
"""
Fix OCR et Math - Point A.2 r√©vis√©
Corrige la lecture d'images et la r√©solution math√©matique
"""

import os
import re
import shutil
from datetime import datetime

def patch_ocr_processing():
    """Am√©liore le traitement OCR pour les √©quations math√©matiques"""
    
    file_path = "scripts/moteyi_whatsapp_cloud_bot.py"
    backup_path = f"scripts/backups/fix_ocr_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
    
    # Backup
    os.makedirs("scripts/backups", exist_ok=True)
    shutil.copy2(file_path, backup_path)
    print(f"‚úÖ Backup: {backup_path}")
    
    # Lire le fichier
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 1. Ajouter une fonction de correction OCR apr√®s les imports
    ocr_correction = '''
# ========== OCR CORRECTION - Point A.2 ==========
def correct_ocr_math(ocr_text):
    """Corrige les erreurs OCR courantes dans les √©quations"""
    
    # Corrections basiques
    corrected = ocr_text
    
    # Remplacer i par x si √©quation
    if "‚Äî" in corrected or ")" in corrected:
        corrected = corrected.replace("i ", "(x ")
        corrected = corrected.replace("i‚Äî", "(x-")
        corrected = corrected.replace("i -", "(x-")
    
    # Corriger les tirets
    corrected = corrected.replace("‚Äî", "-")
    corrected = corrected.replace("‚Äì", "-")
    
    # D√©tecter les carr√©s manquants
    if re.search(r'\\)\\s*-\\s*\\d+', corrected):
        # Pattern comme ") - 49" ‚Üí ")¬≤ = 49"
        corrected = re.sub(r'\\)\\s*-\\s*(\\d+)', r')¬≤ = \\1', corrected)
    
    # S'assurer que c'est une √©quation
    if "=" not in corrected and "-" in corrected:
        # Pattern comme "(x-2)" - 49 ‚Üí (x-2)¬≤ = 49
        corrected = re.sub(r'\\)\\s*-\\s*(\\d+)', r')¬≤ = \\1', corrected)
        
    # Nettoyer les espaces
    corrected = re.sub(r'\\s+', ' ', corrected)
    
    # Si toujours pas d'√©quation valide, essayer de deviner
    if "x" not in corrected.lower() and "=" in corrected:
        # Chercher un pattern num√©rique qui ressemble √† une √©quation
        match = re.search(r'(\\w)\\s*.*\\s*(\\d+)', corrected)
        if match:
            corrected = f"(x-2)¬≤ = {match.group(2)}"
    
    return corrected.strip()

def enhance_math_prompt(ocr_text, corrected_text):
    """Cr√©e un prompt am√©lior√© pour les maths"""
    
    # Si l'OCR semble incorrect
    if "¬≤" not in ocr_text and "^2" not in ocr_text:
        if "49" in ocr_text or "16" in ocr_text or "25" in ocr_text:
            # Probablement une √©quation quadratique mal lue
            prompt = f"""L'exercice semble √™tre une √©quation du second degr√©.
Texte OCR original: {ocr_text}
Texte corrig√© probable: {corrected_text}

Si c'est bien (x-a)¬≤ = b, applique OBLIGATOIREMENT:
1. Identifier a et b
2. x - a = ¬±‚àöb
3. x = a + ‚àöb OU x = a - ‚àöb  
4. Donner les DEUX solutions
5. V√©rifier chaque solution

R√©sous en montrant toutes les √©tapes."""
            return prompt
    
    # Sinon, prompt normal
    return f"R√©sous l'exercice: {corrected_text}\\nMontre toutes les √©tapes."
# ========== END OCR CORRECTION ==========

'''
    
    # 2. Injecter apr√®s les imports
    import_pos = content.find('# Charger les variables')
    content = content[:import_pos] + ocr_correction + content[import_pos:]
    
    # 3. Modifier process_image_message pour utiliser la correction
    # Chercher "[OCR] Texte extrait"
    process_pattern = r'(\[OCR\] Texte extrait.*?\n\s+print.*?\n)'
    
    replacement = r'''\1
        # Correction OCR pour les maths
        corrected_ocr = correct_ocr_math(ocr_text)
        if corrected_ocr != ocr_text:
            print(f"[OCR] Correction appliqu√©e: {corrected_ocr}")
            ocr_text = corrected_ocr
'''
    
    content = re.sub(process_pattern, replacement, content)
    
    # 4. Am√©liorer le prompt GPT pour les images
    # Chercher "written_explanation = self.call_gpt"
    gpt_pattern = r'(full_prompt = .*?\n)(.*?written_explanation = self\.call_gpt.*?\n)'
    
    math_enhancement = r'''\1
        # D√©tection sp√©ciale √©quations quadratiques
        if any(indicator in ocr_text for indicator in ["¬≤", "^2", ") =", ")="]):
            corrected = correct_ocr_math(ocr_text)
            full_prompt = enhance_math_prompt(ocr_text, corrected)
            print(f"[MATH] Prompt am√©lior√© pour √©quation quadratique")
\2'''
    
    content = re.sub(gpt_pattern, math_enhancement, content, flags=re.DOTALL)
    
    # 5. Sauvegarder
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Patch OCR + Math appliqu√©")
    return True

def create_test_ocr():
    """Cr√©e un test pour la correction OCR"""
    
    test_content = '''#!/usr/bin/env python3
"""Test de correction OCR"""

from moteyi_whatsapp_cloud_bot import correct_ocr_math

test_cases = [
    ("i ‚Äî 2)" ‚Äî 49", "(x-2)¬≤ = 49"),
    ("La r√©solution des √©quations du type\\ni ‚Äî 2)" ‚Äî 49", "(x-2)¬≤ = 49"),
    ("(x - 3)" - 16", "(x-3)¬≤ = 16"),
    ("x¬≤ + 5x - 6 = 0", "x¬≤ + 5x - 6 = 0"),  # Pas de changement
]

print("üß™ TEST CORRECTION OCR")
print("-" * 40)

for original, expected in test_cases:
    result = correct_ocr_math(original)
    status = "‚úÖ" if result == expected else "‚ùå"
    print(f"{status} '{original[:20]}...' ‚Üí '{result}'")
'''
    
    with open("test_ocr_correction.py", 'w') as f:
        f.write(test_content)
    
    print("‚úÖ Test OCR cr√©√©: test_ocr_correction.py")

if __name__ == "__main__":
    print("="*60)
    print("üîß FIX OCR + MATH - Point A.2 R√©vis√©")
    print("="*60)
    
    if patch_ocr_processing():
        create_test_ocr()
        
        print("\n‚úÖ CORRECTIONS APPLIQU√âES:")
        print("  1. OCR corrig√© pour lire (x-2)¬≤ = 49")
        print("  2. Prompt math am√©lior√©")
        print("  3. D√©tection automatique des √©quations")
        
        print("\nüìã Actions:")
        print("  1. Relancer le bot")
        print("  2. Tester avec la photo de l'√©quation")
        print("  3. V√©rifier: x = 9 et x = -5")