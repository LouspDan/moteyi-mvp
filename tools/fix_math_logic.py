#!/usr/bin/env python3
"""
Fix de la logique math√©matique - Point A.2
Sprint Phoenix - Am√©lioration globale des capacit√©s math√©matiques
"""

import os
import re
import shutil
from datetime import datetime

def detect_math_type(text):
    """
    D√©tecte le type de probl√®me math√©matique
    Retourne: (type, niveau_complexit√©, indices_contextuels)
    """
    text_lower = text.lower()
    
    # Patterns de d√©tection
    patterns = {
        'equation_quadratique': [
            r'\(.*\)\s*[\¬≤2]\s*=',
            r'x[\¬≤2]\s*[+-]',
            r'√©quation.*second.*degr√©'
        ],
        'equation_lineaire': [
            r'\d*x\s*[+-]\s*\d+\s*=',
            r'r√©sou.*√©quation',
            r'trouve.*x'
        ],
        'calcul_arithmetique': [
            r'^\d+\s*[+\-*/√ó√∑]\s*\d+',
            r'calcul',
            r'combien'
        ],
        'fraction': [
            r'\d+/\d+',
            r'fraction',
            r'simplifi'
        ],
        'pourcentage': [
            r'\d+\s*%',
            r'pourcentage',
            r'pourcent'
        ],
        'geometrie': [
            r'aire|p√©rim√®tre|volume',
            r'triangle|carr√©|cercle|rectangle',
            r'angle|c√¥t√©'
        ],
        'probleme_texte': [
            r'si\s+.*alors',
            r'sachant que',
            r'un.*a\s+\d+.*combien'
        ]
    }
    
    # Identifier le type principal
    for math_type, pattern_list in patterns.items():
        for pattern in pattern_list:
            if re.search(pattern, text_lower):
                return math_type
    
    return 'general'

def create_enhanced_math_prompt(ocr_text, context_rag=None, language="fr"):
    """
    Cr√©e un prompt optimis√© selon le type de math√©matiques d√©tect√©
    """
    
    math_type = detect_math_type(ocr_text)
    
    # Base commune pour tous les prompts
    base_prompt = """Tu es MOTEYI, tuteur expert en math√©matiques du syst√®me √©ducatif RDC.
    
R√àGLES CRITIQUES :
1. TOUJOURS montrer CHAQUE √©tape de calcul
2. V√âRIFIER les r√©sultats en substituant
3. Utiliser la notation math√©matique RDC
4. Adapter l'explication au niveau d√©tect√©
5. NE JAMAIS donner de r√©ponse incorrecte"""
    
    # Prompts sp√©cialis√©s par type
    specialized_prompts = {
        'equation_quadratique': f"""
{base_prompt}

EXERCICE : {ocr_text}

M√âTHODE pour √©quations du type (x-a)¬≤ = b :
1. Identifier a et b dans l'√©quation
2. Appliquer : x - a = ¬±‚àöb
3. Donc : x = a + ‚àöb OU x = a - ‚àöb
4. Donner les DEUX solutions
5. V√©rifier en rempla√ßant x dans l'√©quation originale

EXEMPLE CORRECT :
(x-2)¬≤ = 49
‚Üí x-2 = ¬±‚àö49 = ¬±7
‚Üí x = 2+7 = 9 OU x = 2-7 = -5
V√©rification: (9-2)¬≤ = 7¬≤ = 49 ‚úì et (-5-2)¬≤ = (-7)¬≤ = 49 ‚úì

R√©sous maintenant l'exercice en suivant cette m√©thode.""",
        
        'equation_lineaire': f"""
{base_prompt}

EXERCICE : {ocr_text}

M√âTHODE pour √©quations lin√©aires :
1. Regrouper les x d'un c√¥t√©
2. Regrouper les nombres de l'autre
3. Diviser pour isoler x
4. V√©rifier la solution

Montre chaque transformation.""",
        
        'calcul_arithmetique': f"""
{base_prompt}

CALCUL : {ocr_text}

Effectue le calcul √©tape par √©tape.
Utilise la m√©thode appropri√©e (pos√©e si nombres grands).
V√©rifie le r√©sultat.""",
        
        'probleme_texte': f"""
{base_prompt}

PROBL√àME : {ocr_text}

M√âTHODE :
1. Identifier les donn√©es
2. Identifier ce qu'on cherche
3. Choisir l'op√©ration appropri√©e
4. Effectuer le calcul
5. R√©diger la r√©ponse compl√®te avec unit√©s

R√©sous en expliquant ton raisonnement.""",
        
        'general': f"""
{base_prompt}

QUESTION : {ocr_text}

Analyse le probl√®me et r√©sous-le de mani√®re p√©dagogique.
Montre toutes les √©tapes."""
    }
    
    prompt = specialized_prompts.get(math_type, specialized_prompts['general'])
    
    # Ajouter le contexte RAG si disponible
    if context_rag and context_rag.get('found'):
        prompt += f"\n\nCONTEXTE CURRICULUM RDC :\n{context_rag['prompt_enhancement']}"
    
    # Ajouter les consignes de langue
    if language == "ln":
        prompt += "\n\nR√©ponds en lingala, utilise des termes math√©matiques simples."
    elif language == "sw":
        prompt += "\n\nJibu kwa Kiswahili, tumia maneno rahisi ya hisabati."
    
    return prompt

def patch_bot_file():
    """
    Modifie moteyi_whatsapp_cloud_bot.py pour int√©grer la logique math√©matique am√©lior√©e
    """
    
    file_path = "scripts/moteyi_whatsapp_cloud_bot.py"
    backup_path = f"scripts/backups/moteyi_whatsapp_cloud_bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
    
    # 1. Cr√©er une sauvegarde
    os.makedirs("scripts/backups", exist_ok=True)
    shutil.copy2(file_path, backup_path)
    print(f"‚úÖ Backup cr√©√©: {backup_path}")
    
    # 2. Lire le fichier
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 3. Ajouter les nouvelles fonctions apr√®s les imports
    new_functions = '''
# ========== MATH LOGIC ENHANCEMENT - Point A.2 ==========
def detect_math_type(text):
    """D√©tecte le type de probl√®me math√©matique"""
    text_lower = text.lower()
    
    if any(p in text_lower for p in ['(', ')', '¬≤', 'second degr√©']):
        if '¬≤' in text or '^2' in text:
            return 'equation_quadratique'
    elif '=' in text and any(c in text for c in 'xyz'):
        return 'equation_lineaire'
    elif any(op in text for op in ['+', '-', '*', '/', '√ó', '√∑']):
        return 'calcul_arithmetique'
    else:
        return 'general'

def create_math_enhanced_prompt(ocr_text, context_rag=None):
    """Cr√©e un prompt math√©matique optimis√©"""
    math_type = detect_math_type(ocr_text)
    
    if math_type == 'equation_quadratique':
        return f"""Tu es un tuteur expert. 
Exercice: {ocr_text}

Pour (x-a)¬≤ = b:
1. x-a = ¬±‚àöb
2. x = a¬±‚àöb (DEUX solutions)
3. V√©rifie chaque solution

R√©sous √©tape par √©tape."""
    
    return f"R√©sous: {ocr_text}\\nMontre toutes les √©tapes."
# ========== END MATH ENHANCEMENT ==========

'''
    
    # 4. Injecter apr√®s les imports
    import_end = content.find('# Charger les variables')
    if import_end > 0:
        content = content[:import_end] + new_functions + content[import_end:]
    
    # 5. Modifier process_image_message pour utiliser la nouvelle logique
    # Chercher la ligne avec "full_prompt = "
    pattern = r'full_prompt = f".*?"'
    replacement = 'full_prompt = create_math_enhanced_prompt(ocr_text, context)'
    content = re.sub(pattern, replacement, content, count=1)
    
    # 6. Sauvegarder
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Bot patch√© avec logique math√©matique am√©lior√©e")
    return True

def create_test_file():
    """Cr√©e un fichier de test pour valider les corrections"""
    
    test_content = '''#!/usr/bin/env python3
"""Test de validation - Logique math√©matique Point A.2"""

test_cases = [
    {
        "input": "(x-2)¬≤ = 49",
        "expected": ["x = 9", "x = -5"],
        "type": "equation_quadratique"
    },
    {
        "input": "(x-3)¬≤ = 16",
        "expected": ["x = 7", "x = -1"],
        "type": "equation_quadratique"
    },
    {
        "input": "3x + 5 = 20",
        "expected": ["x = 5"],
        "type": "equation_lineaire"
    },
    {
        "input": "659 + 341",
        "expected": ["1000"],
        "type": "calcul_arithmetique"
    }
]

def test_math_detection():
    from fix_math_logic import detect_math_type
    
    print("üß™ Test de d√©tection des types...")
    for case in test_cases:
        detected = detect_math_type(case["input"])
        status = "‚úÖ" if detected == case["type"] else "‚ùå"
        print(f"{status} {case['input'][:20]}... ‚Üí {detected}")

if __name__ == "__main__":
    print("="*50)
    print("TEST LOGIQUE MATH√âMATIQUE - Point A.2")
    print("="*50)
    test_math_detection()
'''
    
    with open("test_math_fix.py", "w", encoding='utf-8') as f:
        f.write(test_content)
    
    print("‚úÖ Fichier de test cr√©√©: test_math_fix.py")

def main():
    """Fonction principale d'application du fix"""
    
    print("="*60)
    print("üîß FIX LOGIQUE MATH√âMATIQUE - Point A.2")
    print("="*60)
    
    try:
        # 1. Patcher le bot
        print("\n1Ô∏è‚É£ Application du patch...")
        if not patch_bot_file():
            print("‚ùå √âchec du patch")
            return False
        
        # 2. Cr√©er les tests
        print("\n2Ô∏è‚É£ Cr√©ation des tests...")
        create_test_file()
        
        # 3. Instructions finales
        print("\n" + "="*60)
        print("‚úÖ FIX APPLIQU√â AVEC SUCC√àS!")
        print("="*60)
        print("\nüìã Prochaines √©tapes:")
        print("1. Relancer le bot: python scripts/moteyi_whatsapp_cloud_bot.py")
        print("2. Tester avec l'√©quation: (x-2)¬≤ = 49")
        print("3. V√©rifier que les solutions sont: x=9 et x=-5")
        print("\n‚ö†Ô∏è  Si probl√®me, restaurer depuis scripts/backups/")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du fix: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()